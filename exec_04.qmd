---
title: "불러오기와 정리하기"
author: 
  - name: 이상일ㆍ박서우
    affiliation: 서울대학교 지리교육과
    email: si_lee@snu.ac.kr
date-modified: last-modified
number-sections: true
format: 
  html: 
    toc: true
code-link: true
code-copy: true
execute: 
  warning: false
  error: false
  freeze: auto
lightbox: true
editor: visual
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

## 개요 {.unnumbered}

여기서는 R로 데이터사이언스를 하는 과정 중 데이터 불러오기(importing)와 데이터 정리하기(tidying)에 집중한다. 본격적으로 해당 주제를 다루기 전에 [**tidyverse**](https://www.tidyverse.org/)의 공식 데이터 프레임 형식인 티블(tibble)에 대해 간단히 설명한다.

우선 [**tidyverse**](https://www.tidyverse.org/) 패키지를 불러온다.

```{r}
library(tidyverse)
```

## 티블(tibble)

### 왜 티블인가?

데이터 프레임은 가장 널리 사용되는 데이터 형식이고, 일반적인 상황이라면 거의 대부분 데이터 프레임을 가지고 데이터사이언스를 한다. Base R은 전통적으로 `data.frame` 객체를 통해 데이터 프레임을 관리해왔다. `tibble`은 이러한 `data.frame`의 현대적 개량 버전으로 이해하면 되고, 조금의 차이는 있지만 대동소이하다. 이 새로운 데이터 프레임 형식은 `tidyverse` 패키지의 핵심 패키지 중 하나인 [**tibble**](https://tibble.tidyverse.org/) 패키지에서 지원된다.

### 티블 컬럼 유형

한 개의 원소 이상의 어레이를 벡터라고 한다. 여기서 각 벡터가 가진 데이터의 성격을 벡터 유형(type)이라고 하고, 컬럼 유형(type) 혹은 데이터 유형이라고도 한다. 앞에서 살펴본 것처럼, 벡터는 숫자형일 수도 있고, 문자형일 수도 있다. 그러나 이러한 컬럼 유형은 훨씬 다양할 수 있다. 여기서는 [**tibble**](https://tibble.tidyverse.org/) 패키지가 규정하는 컬럼 유형에 대해 살펴본다. 자세한 내용은 [여기](https://tibble.tidyverse.org/articles/types.html)를 참조할 수 있다.

| 클래스 | 데이터 유형 | 예시 | 기호 |
|----|----|----|----|
| 원자(atomic) 벡터 | 논리형(logical) | `TRUE` | lgl |
|  | 정수형(integer) | `1L` | int |
|  | 실수형(double) | `1.5` | dbl |
|  | 문자형(character) | `"A"` | chr |
|  | 복소수형(complex) | `0+1i` | cpl |
|  | 원시형(raw) | `as.raw(1)` | raw |
| 리스트(list) 벡터 | 리스트(list) | `list(1)` | list |
|  | 명명 리스트(named list) | `list(a = 1)` | named list |
| 빌트인 객체 | 범주형(factor) | `factor("A")` | fct |
|  | 순서형(ordered) | `ordered("a")` | ord |
|  | 날짜형(Date) | `Sys.Date()` | date |
|  | 날짜시간형(POSIXt) | `Sys.time()` | dttm |
|  | 시간차이형(difftime) | `vctrs::new_duration(1)` | drtn |
| 데이터 프레임 | 데이터 프레임(data.frame) | `data.frame(a = 1)` | df\[,1\] |
|  | 티블(tbl_df) | `tibble(a = 1)` | tibble\[,1\] |

### 티블 생성하기

#### 기존 데이터를 티블 포맷으로 변환하기

Base R에 포함되어 있는 `iris`라는 데이터 프레임을 사용한다. 아래의 코드를 실행하면 `iris` 데이터가 `data.frame` 형식으로 저장되어 있음을 알 수 있다. Base R의 `class()` 함수의 쓰임새를 확인하라.

```{r}
iris |> 
  glimpse()  
class(iris)
```

`as_tibble()` 함수를 이용하여 `tibble` 객체로 전환한다. 그러면 `data.frame` 객체가 `tibble` 객체로 전환된 것을 알 수 있다.

```{r}
iris_tbl <- iris |> 
  as_tibble() 
class(iris_tbl)
```

아래와 같이 데이터를 열어보면, `data.frame` 객체에서는 볼 수 없는 정보가 나타난다.

```{r}
iris_tbl
```

행이 150개이고 열이 5개라는 사실이 가장 위에 나타나 있고, 앞의 네개 컬럼의 데이터 유형은 실수형(dbl)이고 마지막 컬럼은 범주형(fct)라는 것을 알 수 있다.

#### 티블 객체를 직접 생성하기

`tibble` 객체를 직접 생성하는 방식은 두 가지로 나뉜다.

-   열-단위 방식(보다 일반적): 우선 열-벡터를 만들고 그것을 결합해 최종적인 `tibble` 객체를 만든다. `tibble()` 함수를 이용한다.

-   행-단위 방식: 우선 행-벡터를 만들고 그것을 결합해 최종적인 `tibble` 객체를 만든다. `tribble()` 함수를 이용한다. `tribble`은 전치티블(**tr**ansposed t**ibble**)의 약자이다.

```{r}
tibble(
  x = c(1, 2, 5), 
  y = c("h", "m", "g"),
  z = c(0.08, 0.83, 0.60)
)
```

```{r}
tribble(
  ~x, ~y, ~z,
  1, "h", 0.08,
  2, "m", 0.83,
  5, "g", 0.60
)
```

::: {.callout-note collapse="true" title="열-단위와 행-단위"}
```{r}
tibble(
  number = c(1, 2, 3), 
  name = c("seowoo", "ha-eun", "wuhyung"),
  score = c(70, 83, 79)
)
```

```{r}
tribble(
  ~number, ~name, ~score,
  1, "seowoo", 70,
  2, "ha-eun", 83,
  3, "wuhyung", 79
)
```
:::

### 유용한 티블 함수

#### 행이름 관련 함수

행이름(row name)은 개별 행에 고유한 이름이 부여된 것으로, Base R의 `data.frame` 객체는 행이름으로 `row.names`라는 속성을 갖는다. 비롯 이것이 속성이긴 하지만 다른 컬럼 속성과는 구별되며 하나의 숨겨진 속성처럼 취급된다. 그런데 [**tibble**](https://tibble.tidyverse.org/) 패키지는 행이름 지정을 권장하지 않고, 행이름을 지정하는 간단한 함수도 제공하지 않는다. 타이디버스 철학은 행이름을 숨겨진 속성처럼 취급하기 보다는 하나의 명시적인 컬럼으로 취급하는 것이 더 낳다는 관점에 기반한다. 그러나 [**tibble**](https://tibble.tidyverse.org/) 패키지는 `row.names`를 가진 `data.frame` 객체에 적용할 수 있는 몇 가지 행이름 관련 함수를 제공한다.

위에서와 동일하게 단순한 티블 객체를 생성한다.

```{r}
tbl_1 <- tibble(
  x = c(1, 2, 5), 
  y = c("h", "m", "g"),
  z = c(0.08, 0.83, 0.60)
)
```

행이름(row.name)를 지정한다. `tibble` 객체를 `data.frame` 객체로 전환해 베이스 R의 함수인 `row.names()`를 이용해 행이름을 지정한다.

```{r}
df_1 <- as.data.frame(tbl_1)
row.names(df_1) <- c("A", "B", "C")
df_1
```

`remove_rownames()` 함수를 이용해 행이름을 제거할 수 있다.

```{r}
df_1 |> remove_rownames()
```

`rownames_to_column()` 함수를 이용해 행이름을 또 다른 컬럼으로 전환할 수 있다.

```{r}
df_1 |> rownames_to_column("name")
```

`column_to_rownames()` 함수를 이용해 특정 컬럼을 행이름으로 전환할 수 있다.

```{r}
df_1 |> rownames_to_column("name") |> 
  column_to_rownames("name")
```

#### 행 혹은 열 삽입 함수

다음과 같이 한 행을 삽입한다.

```{r}
tbl_1 |> add_row(x = 10, y = "u", z = 0.75)
```

다음과 같은 방식으로 여러 행을 삽입할 수 있다.

```{r}
tbl_1 |> 
  add_row(x = c(10, 15), y = c("u", "x"), z = c(0.75, 1.10))
```

다음과 같이 한 열을 삽입한다.

```{r}
tbl_1 |> add_column(p = c("TRUE", "TRUE", "FALSE"))
```

다음과 같은 방식으로 여러 열을 삽입할 수 있다.

```{r}
tbl_1 |> 
  add_column(p = c("TRUE", "TRUE", "FALSE"), q = c(1L, 2L, 3L))
```

## 데이터 불러오기

### **readr** 패키지

```{r}
library(readr)
```

#### 파일 형식

[**readr**](https://readr.tidyverse.org/) 패키지는 다양한 함수를 이용해 다양한 형식의 데이터를 불러올 수 있게 도와준다.

-   `read_csv()`: 콤마분리(comma-separated values, CSV) 형식의 파일

-   `read_csv2()`: 세미콜론분리(semicolon-separated) 형식의 파일

-   `read_tsv()`: 탭구분(tab-delimited) 형식의 파일

-   `read_delim()`: 여타의 구분 형식의 파일

-   `read_fwf()`: 고정폭(fixed-width) 형식의 파일

-   `read_table()`: 공백구분 형식의 파일

-   `read_log()`: 아파치 형식(Apache-style)의 로그 파일

#### 컬럼 파싱 함수들

컬럼의 내용 중 특정한 유형의 정보만 추출하는 것을 파싱(parsing)이라고 한다. 이러한 파싱은 새로운 데이터를 읽어들이는 과정에서 파싱을 하는 경우와 기존의 벡터에서 특정 유형을 값을 추출하기 위해 파싱하는 경우의 두 가지로 나뉠 수 있는데, 데이터 유형별로 쌍둥이 함수가 존재한다.

| 데이터 유형       | 새로운 벡터 불러들이기 | 기존 벡터에 적용하기 |
|-------------------|------------------------|----------------------|
| 논리형(logical)   | `col_logical()`        | `parse_logical()`    |
| 정수형(integer)   | `col_integer()`        | `parse_integer()`    |
| 실수형(double)    | `col_double()`         | `parse_double()`     |
| 문자형(character) | `col_character()`      | `parse_character()`  |
| 일시형(datetime)  | `col_datetime()`       | `parse_datetime()`   |
| 날짜형(date)      | `col_date()`           | `parse_date()`       |
| 시간형(time)      | `col_time()`           | `parse_time()`       |
| 범주형(factor)    | `col_factor()`         | `parse_factor()`     |
| 추측형(guess)     | `col_guess()`          | `parse_guess()`      |
| 수치형(number)    | `col_number()`         | `parse_number()`     |

새로운 벡터를 위한 파싱은 데이터를 불러들이는 과정에서 컬럼 별로 미리 데이터 유형을 지정하면 여러가지로 이점이 있기 때문에 중요하다. 간단한 사례를 살펴보자.

```{r}
read_csv("
  logical,numeric,date,string
  TRUE,1,2021-01-15,abc
  false,4.5,2021-02-15,def
  T,Inf,2021-02-16,ghi
")
```

데이터가 깔끔하게 주어진다면 데이터를 불러드리는 과정에 개별 컬럼의 유형을 지정할 필요가 없다. 그러나 현실이 이렇게 간단하지 않을 수 있고, 좀 더 복잡한 예제는 다음에서 다루도록 한다.

#### `read_csv()` 함수의 활용

지난번 실습에서 사용한 데이터를 면밀히 살펴본다.

```{r}
students <- read_csv("https://pos.it/r4ds-students-csv")
students
```

다음의 몇 가지 점이 불만족스럽다.

-   변수명: 특히 `Student ID`와 `Full Name` 변수명은 규칙에 어긋난다. 변수명 속에 공란이 있으면 좋지 않다. 이런 이름을 비구문명(non-syntactic name)이라고 하고, 백틱(\` \`)으로 둘러싸여 표시된다. 나중에 문제를 일으킬 수 있다.

-   변수 형식: `mealPlan`은 문자형(chr)이 아니라 팩트형(fct)이며, `AGE`는 문자형(chr)이 아니라 수치형(dbl)이 적절하다.

-   결측치(NA): `favourite.food`의 'N/A'는 형식에 맞지 않아 결측치가 아니라 문자로 취급된다. 따라서 'N/A'가 결측치임을 알려주어야 한다.

이러한 점을 반영하여 csv 파일을 다시 불러오기한다. 여기서 여러 인수의 기능을 이해하는 것이 중요하다. `skip` 인수는 몇번 째 행까지를 읽지 않을 것인가를 지정한다. `col_names` 인수는 컬럼 이름을 지정한다. `col_types` 인수는 컬럼의 유형을 미리 설정하는데, 여기에 위에서 언급한 파싱 함수가 사용된다. `na` 인수는 어떤 셀 값(여기서는 "N/A")을 결측치(NA)로 취급할 것인가를 지정한다.

```{r}
students <- read_csv(
  "https://pos.it/r4ds-students-csv", 
  skip = 1, 
  col_names = c("student_id", "full_name", "favorite_food", "meal_plan", "age"),
  col_types = cols(
    meal_plan = col_factor(),
    age = col_number()),
  na = c("N/A")
  )
students
```

### 엑셀 파일

#### readxl 패키지

가장 널리 사용되는 스프레드시트(spreadsheet) 형식인 엑셀 파일을 불러들이기 위해서는 [**readxl**](https://readxl.tidyverse.org/)이라는 패키지가 필요하다. [**tidyverse**](https://www.tidyverse.org/)의 핵심 패키지는 아니지만 일종의 친척 패키지라 할 수는 있다. [**tidyverse**](https://www.tidyverse.org/)에 포함되어 있지 않기 때문에 따로 인스톨하고 `library()` 함수를 통해 불러와야 한다.

```{r}
library(readxl)
```

가장 널리 사용되는 명령어는 다음의 세 가지이다.

-   `read_xls()`: xls 확장자를 가진 엑셀 파일 불러오기

-   `read_xlsx()`: xlsx 확장자를 가진 엑셀 파일 불러오기

-   `read_excel()`: xls 혹은 xlsx 확장자를 가진 엑셀 파일 불러오기

#### `read_excel()` 함수의 활용

`World Population Prospects 2024` 데이터를 직접 다운받아 실습을 진행하고자 한다. 이 데이터셋은 매우 중요하다. 다음의 절차에 따라 해당 엑셀 파일을 다운로드한다.

-   WPP 웹사이트(<https://population.un.org/wpp/>)에 접속한다.

-   Download Data Files를 클릭한다.

![WPP 데이터 홈페이지(<https://population.un.org/wpp/>)](images/image1.PNG){#fig-wpp-1 fig-align="center"}

-   다음의 파일을 클릭한다: Compact (most used: estimates and medium projections) (XLSX)

![WPP 데이터 선택](images/image2.PNG){#fig-wpp-2 fig-align="center"}

-   엑셀 파일(WPP2024_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT.xlsx)을 다운로드하여 자신의 프로젝트 폴더에 저장한다.

R 바깥에서 다운로드한 파일을 열어 어떠한 정보가 어떠한 방식으로 수록되어 있는지 살펴본다. 데이터 불러오기를 위해 다음의 네 가지 사항에 유의해야 함을 이해한다.

-   16번 행까지는 불필요한 영역이다.

-   17번 행을 변수명으로 사용할 경우 많은 문제점이 발생한다.

-   결측치는 공란이거나 '...' 기호로 표시되어 있다.

-   첫 번째 워킹시트(Estimates)에는 1950\~2023의 데이터가, 두 번째 워킹시트(Medium variant)에는 2024\~2100년의 데이터가 수록되어 있다. 나중에 결합해야한다.

우선 엑셀 파일을 그대로 불러와 본다.

```{r}
read_excel(
  "WPP2024_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT.xlsx", 
  sheet = "Estimates" 
  )
```

끔찍하다. 위의 네 가지 사항을 감안하여 다음과 같은 코드를 실행한다.

```{r}

new_names <- c("index", "variant", "region_name", "notes", "location_code", 
               "ISO3", "ISO2", "SDMX", "type", "parent_code", "year", "pop_jan_total", 
               "pop_jul_total", "pop_jul_total_male", "pop_jul_total_female", "pop_den", "sex_ratio", 
               "median_age", "natural_change", "RNC", "pop_change", "PGR", 
               "doubling_time", "births", "births_by_f1519", "CBR", "TFR", "NRR", 
               "mean_age_childbearing", "sex_ratio_birth", "deaths_total", 
               "deaths_male", "deaths_female", "CDR", "life_exp_total", 
               "life_exp_male", "life_exp_female", "life_exp_15_total", 
               "life_exp_15_male", "life_exp_15_female", "life_exp_65_total", 
               "life_exp_65_male", "life_exp_65_female", "life_exp_80_total", 
               "life_exp_80_male", "life_exp_80_female", "infant_deaths", 
               "IMR", "live_births", "under_five_deaths", "mort_under_five", 
               "mort_bf_40_total", "mort_bf_40_male", "mort_bf_40_female", "mort_bf_60_total", 
               "mort_bf_60_male", "mort_bf_60_female", "mort_bt_1550_total", 
               "mort_bt_1550_male", "mort_bt_1550_female", "mort_bt_1560_total", 
               "mort_bt_1560_male", "mort_bt_1560_female", "net_migrants", "NMR")

wpp_2024_estimates <- read_excel(
  "WPP2024_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT.xlsx",
  sheet = "Estimates",
  skip = 17, 
  col_names = new_names,
  col_types = c(rep("guess", 3), "text", "guess", rep("text", 2), rep("guess", 58)),
  na = c("...", "")
)

wpp_2024_future <- read_excel(
  "WPP2024_GEN_F01_DEMOGRAPHIC_INDICATORS_COMPACT.xlsx",
  sheet = "Medium variant",
  skip = 17, 
  col_names = new_names,
  col_types = c(rep("guess", 3), "text", "guess", rep("text", 2), rep("guess", 58)),
  na = c("...", "")
)

wpp_2024 <- bind_rows(wpp_2024_estimates, wpp_2024_future)

wpp_2024 <- wpp_2024 |> 
  filter(
    type != "Label/Separator"
  ) |> 
  mutate(
    across(
      c(pop_jan_total, pop_jul_total, pop_jul_total_male, pop_jul_total_female, 
        natural_change, pop_change, births, deaths_total, 
        deaths_male, deaths_female, net_migrants), \(x) x * 1000
    )
  )

view(wpp_2024)
```

위의 코드는 다음의 단계로 진행된 것이다.

-   변수명을 새로 지정해 둔다.

-   `read_excel()` 함수를 이용하여 시트명이 "Estimates"(1950-2023)인 것을 불러들인다. `sheet`, `skip`, `col_names`, `col_types`, `na`과 같은 인수가 사용된다. `sheet` 인수는 엑셀 시트의 이름을 지정하고, `skip` 인수는 몇번 째 행까지를 읽지 않을 것인가를 지정한다. `col_names` 인수는 컬럼 이름을 지정하는데, 미리 만들어 둔 `new_names` 객체가 지정된 것을 볼 수 있다. `col_types` 인수는 컬럼의 유형을 미리 설정하는데, "skip", "guess", "logical", "numeric", "date", "text", "list" 중 선택을 할 수 있다. 불러들인 후 다시 지정할 수도 있지만 미리 해두면 불러 들이는 시간을 좀 더 단축할 수 있다.

-   동일한 방식으로 시트명이 "Medium variant"(2024-2100)인 것을 불러들인다. 동일한 인수가 사용된다.

-   `bind_rows()` 함수를 이용하여 두 객체를 결합한다.

-   불필요한 행(`type` 컬럼이 "Label/Separator"로 되어 있는 경우)을 제거하고, 단위가 1,000으로 설정되어 있는 변수들을 원 변수값으로 되돌린다.

나중에 사용하기 위해, [**writexl**](https://github.com/ropensci/writexl) 패키지의 `write_xlsx()` 함수를 이용하여 엑셀 파일로 저장한다.

```{r}
library(writexl)
write_xlsx(wpp_2024, "wpp_2024.xlsx")
```

그런데, 저장된 파일을 `read_excel()` 함수로 다시 불러 들이면 컬럼 형식에 대한 정보가 사라져 버리는 등의 에러가 발생한다. 이런 점 때문에 다음과 같은 대안이 존재한다. [**readr**](https://readr.tidyverse.org/) 패키지의 `write_rds()` 함수로 저장하고, 다시 `read_rds()` 함수로 불러들이면 정확히 동일한 것을 얻을 수 있다. RDS는 R에서만 사용되는 데이터 이진 포맷(binary format)이다.

```{r}
write_rds(wpp_2024, "wpp_2024.rds")
read_rds("wpp_2024.rds")
```

### 데이터 쓰기

**readr** 패키지는 `write_csv()`, `write_delim()`와 같은 함수를 제공한다. 엑셀 파일을 저장하기 위해서는 [**writexl**](https://github.com/ropensci/writexl) 패키지의 `write_xlsx()` 함수를 사용한다. 혹은 [**openxlsx**](https://ycphs.github.io/openxlsx/) 패키지의 `write.xlsx()` 함수를 사용할 수도 있다.

## 데이터 정리하기

데이터 정리하기는 지저분한 데이터(messy data)를 정돈된 데이터(tidy data)로 만드는 과정을 의미한다. 정돈된 데이터는 다음의 세 가지 속성을 갖는다.

-   개별 변수(variable)는 열(컬럼, column) 하나를 차지한다. 즉, 개별 열에는 하나의 변수가 위치한다.

-   개별 관측개체(observation)는 하나의 행(로, row)을 차지한다. 즉, 개별 행에는 하나의 관측개체가 위치한다.

-   개별 값(value)은 하나의 셀(cell)을 차지한다. 즉, 개별 셀에는 하나의 값이 위치한다.

이 세가지 속성 중 하나라도 위배하는 데이터는 정돈된 데이터가 아니다. 어떤 데이터이건 그것이 정돈된 데이터이기만 하다면, 표준적인 툴을 통해 해당 데이터를 다른 데이터와 동일한 방식으로 다룰 수 있다. 데이터 정리하기에 특화된 패키지가 [**tidyverse**](https://www.tidyverse.org/) 패키지의 핵심 패키지 중의 하나인 [**tidyr**](https://tidyr.tidyverse.org/) 패키지이다.

데이터 정리하기는 다음의 세 가지 범주로 나뉜다.

-   데이터 구조 변형: 가장 중요한 오퍼레이션으로 데이터 늘이기와 데이터 넓히기기가 포함된다.

-   컬럼의 결합 및 분할: 두 개 이상의 컬럼을 하나의 컬럼으로 결합하거나 한 컬럼을 두 개 이상의 컬럼으로 분할한다.

-   결측치 처리: 결측치가 포함된 행을 다양한 방식으로 처리한다.

### 데이터 구조 변형

여기서는 데이터 늘이기(lengthening data)와 데이터 넓히기(widening data)에 집중한다. 데이터 늘이기는 행을 늘이는 방식으로 데이터 구조를 변형하는 것이고, 데이터 넓히기는 컬럼의 숫자를 늘이는 방식으로 데이터 구조를 변형하는 것이다.

#### 데이터 늘이기

실습을 위해 [**tidyverse**](https://www.tidyverse.org/) 패키지에 포함되어 있는 `billboard` 데이터를 사용한다. 이 데이터셋에는 2000년 한해 동안 노래의 주별 순위 정보가 포함되어 있다.

```{r}
billboard
```

관측개체는 개별 노래이며 앞의 세 변수(artist, track, data.entered)는 노래 관련 속성이고, 나머지 76개 변수(wk1\~wk76)는 76주간 개별 노래의 순위를 나타낸다. '몇 번째 주인가'는 변수일 수 없으므로 week라는 변수를 생성하여 개별주가 변수값이 되도록 데이터를 변형할 필요가 있다.

```{r}
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank"
  )
```

`cols`는 새로 생성될 변수의 변수값이 되어야 할 현 데이터셋의 변수들을 지정한다. `names_to`는 `cols`를 통해 지정된 변수명이 변수값으로 들어갈 새로 운 변수의 이름을 지정한다. `values_to`는 `cols` 변수들의 변수값들이 들어갈 새로운 변수의 이름을 지정한다.

그런데, 좀 더 복잡한 데이터 늘이기의 상황이 있을 수 있다. [**tidyverse**](https://www.tidyverse.org/) 패키지에 포함되어 있는 `who2` 데이터를 사용한다. 이것은 WHO(world Health Organization, 세계보건기구)에서 제공한 데이터로서 1980\~2013년 전세계 209개국의 결핵 환자수에 대한 데이터이다.

```{r}
glimpse(who2)
```

`country`와 `year`은 분명한 변수이지만 나머지 56개 변수는 무엇인지 알 수 없다. 그런데 잘 살펴보면, 변수명에 어떤 패턴이 있다는 것을 알 수 있다. 모두 세 부분으로 나뉘어져 있는데, 첫 번째 부분은 진단법(sp, rel, ep)과 관련되어 있고, 두 번째 부분은 성(m, f)과 관련되어 있고, 세 번째 부분은 연령(014, 1524, 2534, 3544, 4554, 5564, 65)과 관련되어 있다. 56개 변수의 셀 값은 모두 케이스(환자수)를 의미한다. 이 지저분한 데이터를 `pivot_longer()` 함수를 이용해 정돈된 데이터로 만들어 본다.

```{r}
who2 |> 
  pivot_longer(
    cols = !c(country, year),
    names_to = c("diagnosis", "gender", "age"), 
    names_sep = "_",
    values_to = "count"
  )
```

각 인수의 역할에 대해 이해하는 것이 중요하다. 그리고 정돈된 데이터를 만들기 위해 왜 데이터 '늘이기'를 해야하는지 생각해 본다.

이것보다 좀 더 복잡한 데이터 늘이기의 상황이 있을 수 있다. 간단한 예시인 `household` 데이터를 살펴보자.

```{r}
household
```

자세히 살펴보면 변수명에 두 개의 변수(`dob`, `name`)와 또 다른 변수(`child`)의 두 숫자(`1`, `2`)가 포함되어 있다. 각 `family`별로 최대 두 명까지의 자녀가 있고 각 자녀별로 생년월일과 이름에 대한 정보가 포함되어 있다. 첫 행은 첫 번째 가정의 첫 번째 자녀의 생년월일은 1998년 11월 26일이고 이름은 Susan이며, 두 번째 자녀의 생년월일은 2000년 1월 29일이고 이름은 Jose이다. 분리자인 "`_`"이 존재하므로 `dob`와 `name`은 두 변수로 분리하고, 첫번째 자녀인지 두번째 자녀인지를 알려주는 또 다른 변수를 생성해야 한다. 이를 위해 `.value`라고 하는 특별한 것을 사용한다.

```{r}
household |> 
  pivot_longer(
    cols = !family, 
    names_to = c(".value", "child"), 
    names_sep = "_", 
    values_drop_na = TRUE
  )
```

`names_to = c(".value", "child")`와 `names_sep = "_"`는 네 개의 변수(`dob_child1`, `dob_child2`, `name_child1`, `name_child2`)의 이름을 크게 두 부분으로 분할하여 앞 부분(`dob`와 `name`)을 새로운 변수로 생성하고, 뒷 부분(`child1`, `child2`)는 child라는 변수를 새로 생성하여 그것은 변수값으로 전환한다. 결국 변수명의 일부는 새로운 변수명이 되고, 또 다른 일부는 변수값이 되는 것이다. 이렇게 되면 `values_to` 아규먼트가 필요없게 된다. 마지막에 있는 `values_drop_na` 아규먼트도 중요한 역할을 하는데, 두 번째 가정은 한 자녀만을 가지고 있기 때문에 결측값이 포함되어 있는데 그것을 최종 결과에 포함시키지 않는 일을 한다.

#### 데이터 넓히기

실습을 위해 [**tidyverse**](https://www.tidyverse.org/) 패키지에 포함되어 있는 `cms_patient_experience` 데이터를 사용한다. 이것은 미국의 [Centers of Medicare and Meicaid Services](https://www.cms.gov/)가 제공한 데이터이다.

```{r}
cms_patient_experience
```

이 데이터도 정돈된 데이터가 아니다. 자세히 살펴보면 다음과 같은 사실을 알 수 있다.

-   `org_pac_id`와 `org_nm` 변수는 의료조직의 식별자와 이름이다.

-   의료조직별로 6개씩의 열을 차지하고 있는데, 6개의 열은 `measure_cd`와 `measure_title`에 나타나 있는 것과 같은 6개의 서로 다른 조사 항목을 나타낸다. (ex. CAHPS_GRP_1은 환자의 경험 지표중 진료 예약 정보 제공 점수)

-   마지막의 `prf_rate`는 조사 항목별 점수이다.

`pivot_wider()` 함수를 이용하여, 행에는 개별 의료조직이, 열에는 개별 조사 항목이 나타나는 정돈된 데이터를 만들어 본다.

```{r}
cms_patient_experience |> 
  pivot_wider(
    id_cols = starts_with("org"),
    names_from = measure_cd,
    values_from = prf_rate
  )
```

이제 어떤 의료조직이 어떤 항목에서 얼마의 점수를 받았는지를 일목요연하게 알아 볼 수 있다. `id_cols`는 각 행의 완전한 고유성을 위해 필요한 모든 변수를 지정한다. 사례의 경우 `org`가 들어가는 `org_pac_id`와 `org_nm`이 그 역할을 하는데, 사실 둘은 판별자로서 동일한 것이기 때문에 둘 중 하나만 사용해도 된다. 그러나 그러면 최종 산출물에서 지정되지 않은 컬럼은 나타나지 않기 때문에 동일한 기능을 하더라도 모두 지정하는 것이 좋다. 여러개의 변수가 집합적으로 판별자 역할을 하는 경우가 많이 있으며, 그럴 경우 해당 변수를 모두 지정해 주어야 한다. 하나라도 누락되면 에러가 발생하거나 원치 않는 결과를 얻게 된다. `names_from`은 새로이 생성될 변수들의 이름을 변수값으로 가지고 있는 변수명을 지정한다. `values_from`은 새로 생성될 변수들의 변수값이 될 값이 어떤 변수로부터 오는지를 지정한다. 정돈된 데이터를 만들기 위해 이번에는 왜 데이터 '넓히기'를 해야했는지 생각해 본다.

:::: {.callout-note collapse="true" title="단원 마무리 QUIZ"}
데이터구조 변경의 마지막으로 한 가지 퀴즈를 내보고자 한다. 퀴즈에서 사용할 데이터는 `world_bank_pop`로 [**tidyr**](https://tidyr.tidyverse.org/)에 포함된 데이터셋 중 하나이다. 이 데이터셋에는 연도별 인구수가 들어가 있다. 우선, 우리는 오늘 총인구만을 가지고 데이터를 정리할 것이기 때문에 `indicator`에서 `SP.POP.TOTL`만을 선택하고자 한다.

```{r}
world_pop <- world_bank_pop |> 
  filter(indicator == "SP.POP.TOTL")
```

::: panel-tabset
## 문제A

`world_pop`의 구조를 확인하고, 아래의 분석을 수행할 수 있도록 데이터를 정리하라.

-   한 나라(예: "KOR")의 연도별 인구 추이 그래프를 그리려고 한다.

-   x축에는 연도를 y축에는 인구수의 데이터가 필요하다.

-   연도가 추가 되도라도 새로운 열 변수를 추가하지 않고도 작업할 수 있어야 한다.

## 코드A

```{r}
wb_long <- world_pop |> 
  pivot_longer(
    cols = !c(country, indicator),
    names_to = "year",
    values_to = "pop"
  )
wb_long
```

## 문제B

여러나라의 인구를 한 눈에 비교할 수 있는 표가 필요하다. `wb_long`의 구조를 확인하고, 이를 위한 데이터를 정리하라.

-   결과는 표에서 연도 간 값을 가로로 나란히 비교하기 쉽도록 구성되어 있어야 한다.

## 코드B

```{r}
wb_long |>
  pivot_wider(
    id_cols = c(country),
    names_from = year,
    values_from = pop)
```
:::
::::

### 컬럼의 결합 및 분할

#### 컬럼 결합하기

두 개 이상의 컬럼을 연합하여 하나의 새로운 컬럼을 생성한다. 우선 간단한 예제 티블 객체를 생성한다.

```{r}
b_tibble <- tibble(
  country = c("A", "A", "B", "B"),
  century = c("19", "20", "19", "20"),
  year = c("99", "00", "99", "00")
)
b_tibble
```

`century`와 `year` 컬럼을 결합하여 새로운 컬럼을 생성한다.

```{r}
b_tibble |> unite(century, year, col = "year", sep = "")
```

#### 컬럼 분할하기

하나의 컬럼을 두 개 이상의 컬럼으로 분할한다. 우선 간단한 예제 티블 객체를 생성한다.

```{r}
c_tibble <- tibble(
  country = c("A", "A", "B", "B"),
  year = c("1999", "2000", "1999", "2000"),
  rate = c("0.7K/19M", "2K/20M", "37K/172M", "80K/174M")
)
c_tibble
```

`rate` 컬럼을 분할하여 새로운 두 개의 컬럼을 생성한다. 컬럼이 늘어 나는 것이므로 `separate_wider_delim()` 함수를 통해 수행한다.

```{r}
c_tibble |> separate_wider_delim(
  rate, delim = "/", names = c("cases", "pop") 
)
```

유사한 기능을 하는 파생 함수에 `separate_wider_position()`과 `separate_wider_regex()` 함수도 있다.

하나의 셀 속의 값을 분할하는 것은 위와 동일하지만, 분할된 값을 새로운 컬럼으로 옮기는 방식이 아니라 동일한 행의 새로운 열로 옮기는 방식 역시 가능한다. 행을 늘이기 때문에 `separate_longer_delim()` 함수를 사용한다.

```{r}
c_tibble |> separate_longer_delim(
  rate, delim = "/"
)
```

유사한 기능을 하는 파생 함수에 `separate_longer_position()` 함수도 있다.

### 결측치(NA) 처리

해당 셀에 데이터가 존재하지 않는 경우 그것을 결측치(missing value)라 하고, R에서는 보통 NA(Not Available)이라고 한다. [**tidyr**](https://tidyr.tidyverse.org/) 패키지는 이러한 결측치를 다루기 위한 몇 가지 유용한 함수를 제공한다. 우선 간단한 예제 티블 객체를 생성한다.

```{r}
d_tibble <- tibble(
  x1 = c("A", "B", "C", "D", "E"), 
  x2 = c(1, NA, NA, 3, 4),
  x3 = c(NA, TRUE, FALSE, NA, FALSE)
)
d_tibble
```

#### 결측치를 포함한 행 삭제하기

`drop_na()` 함수를 통해 결측치가 포함된 행을 삭제할 수 있다. 우선 어떤 컬럼에서라도 NA를 가지는 모든 행을 삭제한다.

```{r}
d_tibble |> drop_na()
```

특정한 컬럼에 NA를 가지는 행만 삭제할 수 있다.

```{r}
d_tibble |> drop_na(x2)
```

```{r}
d_tibble |> drop_na(x3)
```

#### 결측치를 주변 값을 이용해 채워넣기

`fill()` 함수는 위나 아래의 값을 이용해 NA를 대체하는 것이다. 방향의 "down"은 기본값으로 위의 값을 기준으로 아래 방향으로 채움이 이루어진다는 것이다.

```{r}
d_tibble |> fill(x2, .direction = "down")
```

방향을 다르게 지정할 수도 있다. "up"은 아래의 값을 기준으로 위 방향으로 채움이 이루어진다는 것이다.

```{r}
d_tibble |> fill(x2, .direction = "up")
```

이렇게 하면 아래에 참조할 것이 없는 다섯 번째 행의 값은 그대로 NA로 남게 된다. 이를 해소하기 위해 "updown"으로 설정할 수 있는데, 먼저 위 방향으로 채움이 이루어지고 NA가 여전히 존재하는 경우 아래 방향의 채움이 이루어진다.

```{r}
d_tibble |> fill(x2, .direction = "updown")
```

#### 결측치를 특정 값으로 채워넣기

`raplace_na()` 함수를 통해 특정 값을 지정해 NA를 대체할 수 있다.

```{r}
d_tibble |> replace_na(
  list(x2 = 0, x3 = TRUE)
)
```

#### 암묵적 결측치 처리

암묵적(implicit) 결측치란 데이터셋에 아예 존재하지 않아 기록되지 않은 결측치를 말하는데, 행의 부재 형태로 나타난다. 예시를 위해 간단한 티블 객체를 생성한다.

```{r}
e_tibble <- tibble(
  x1 = c("A", "B", "B"), 
  x2 = c("X", "X", "Y"),
  x3 = c(3, 4, 5)
)
e_tibble
```

여기서 x1과 x2는 범주형 변수이고, 모두 4가지(A-X, A-Y, B-X, B-Y)이 가능하다. 하지만 현재 데이터셋에는 A-Y가 존재하지 않는데, 이 때 이것을 암묵적 결측치라고 부른다. 암묵적 결측치를 명시적 결측치로 만드는 것이 필요한 상황이 있을 수 있는데, `complete()` 함수를 통해 암묵적 결측치를 확인할 수 있다.

```{r}
e_tibble |> complete(x1, x2)
```

A-Y에 대한 x3의 셀의 NA로 나타나는 것을 확인할 수 있다. 앞의 `fill()` 함수와 유사한 방식으로 해당 결측치를 채울수도 있다.

```{r}
e_tibble |> complete(x1, x2, fill = list(x3 = 0))
```

암묵적 결측치의 확인이 목적이 아니라 모든 카테고리의 조합 상황을 확인하고 싶을 때는 `expand()` 함수를 사용한다.

```{r}
e_tibble |> expand(x1, x2)
```
